#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PartyCafe.Site.DBUtils
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PartyCafeDB_2")]
	public partial class PartyCafeClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertEvents(Events instance);
    partial void UpdateEvents(Events instance);
    partial void DeleteEvents(Events instance);
    partial void InsertGallery(Gallery instance);
    partial void UpdateGallery(Gallery instance);
    partial void DeleteGallery(Gallery instance);
    partial void InsertGames(Games instance);
    partial void UpdateGames(Games instance);
    partial void DeleteGames(Games instance);
    partial void InsertPhotos(Photos instance);
    partial void UpdatePhotos(Photos instance);
    partial void DeletePhotos(Photos instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public PartyCafeClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PartyCafeDB_2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Events> Events
		{
			get
			{
				return this.GetTable<Events>();
			}
		}
		
		public System.Data.Linq.Table<Gallery> Gallery
		{
			get
			{
				return this.GetTable<Gallery>();
			}
		}
		
		public System.Data.Linq.Table<Games> Games
		{
			get
			{
				return this.GetTable<Games>();
			}
		}
		
		public System.Data.Linq.Table<Photos> Photos
		{
			get
			{
				return this.GetTable<Photos>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private System.DateTime _EventDate;
		
		private int _IdPhoto;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntityRef<Photos> _Photos;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Events()
		{
			this._Photos = default(EntityRef<Photos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Events", Storage="_Photos", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photos Photos
		{
			get
			{
				return this._Photos.Entity;
			}
			set
			{
				Photos previousValue = this._Photos.Entity;
				if (((previousValue != value) 
							|| (this._Photos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photos.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Photos.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gallery")]
	public partial class Gallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private int _IdPhoto;
		
		private string _Description;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntityRef<Photos> _Photos;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Gallery()
		{
			this._Photos = default(EntityRef<Photos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Gallery", Storage="_Photos", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photos Photos
		{
			get
			{
				return this._Photos.Entity;
			}
			set
			{
				Photos previousValue = this._Photos.Entity;
				if (((previousValue != value) 
							|| (this._Photos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photos.Entity = null;
						previousValue.Gallery.Remove(this);
					}
					this._Photos.Entity = value;
					if ((value != null))
					{
						value.Gallery.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Games : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private string _Platform;
		
		private string _Description;
		
		private int _IdPhoto;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntityRef<Photos> _Photos;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlatformChanging(string value);
    partial void OnPlatformChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Games()
		{
			this._Photos = default(EntityRef<Photos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Platform
		{
			get
			{
				return this._Platform;
			}
			set
			{
				if ((this._Platform != value))
				{
					this.OnPlatformChanging(value);
					this.SendPropertyChanging();
					this._Platform = value;
					this.SendPropertyChanged("Platform");
					this.OnPlatformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Games", Storage="_Photos", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photos Photos
		{
			get
			{
				return this._Photos.Entity;
			}
			set
			{
				Photos previousValue = this._Photos.Entity;
				if (((previousValue != value) 
							|| (this._Photos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photos.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Photos.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photos")]
	public partial class Photos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Path;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntitySet<Events> _Events;
		
		private EntitySet<Gallery> _Gallery;
		
		private EntitySet<Games> _Games;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Photos()
		{
			this._Events = new EntitySet<Events>(new Action<Events>(this.attach_Events), new Action<Events>(this.detach_Events));
			this._Gallery = new EntitySet<Gallery>(new Action<Gallery>(this.attach_Gallery), new Action<Gallery>(this.detach_Gallery));
			this._Games = new EntitySet<Games>(new Action<Games>(this.attach_Games), new Action<Games>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Events", Storage="_Events", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Events> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Gallery", Storage="_Gallery", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Gallery> Gallery
		{
			get
			{
				return this._Gallery;
			}
			set
			{
				this._Gallery.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photos_Games", Storage="_Games", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Games> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Photos = this;
		}
		
		private void detach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Photos = null;
		}
		
		private void attach_Gallery(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Photos = this;
		}
		
		private void detach_Gallery(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Photos = null;
		}
		
		private void attach_Games(Games entity)
		{
			this.SendPropertyChanging();
			entity.Photos = this;
		}
		
		private void detach_Games(Games entity)
		{
			this.SendPropertyChanging();
			entity.Photos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Login;
		
		private string _Password;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Users()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
