#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PartyCafe.Site.DBUtils
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="u0103018_partycafe")]
	public partial class PartyCafeClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGames(Games instance);
    partial void UpdateGames(Games instance);
    partial void DeleteGames(Games instance);
    partial void InsertMenuGroups(MenuGroups instance);
    partial void UpdateMenuGroups(MenuGroups instance);
    partial void DeleteMenuGroups(MenuGroups instance);
    partial void InsertMenuItems(MenuItems instance);
    partial void UpdateMenuItems(MenuItems instance);
    partial void DeleteMenuItems(MenuItems instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertGallery(Gallery instance);
    partial void UpdateGallery(Gallery instance);
    partial void DeleteGallery(Gallery instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServicePhoto(ServicePhoto instance);
    partial void UpdateServicePhoto(ServicePhoto instance);
    partial void DeleteServicePhoto(ServicePhoto instance);
    partial void InsertEventPhoto(EventPhoto instance);
    partial void UpdateEventPhoto(EventPhoto instance);
    partial void DeleteEventPhoto(EventPhoto instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertGalleryHashtag(GalleryHashtag instance);
    partial void UpdateGalleryHashtag(GalleryHashtag instance);
    partial void DeleteGalleryHashtag(GalleryHashtag instance);
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertServiceVideos(ServiceVideos instance);
    partial void UpdateServiceVideos(ServiceVideos instance);
    partial void DeleteServiceVideos(ServiceVideos instance);
    partial void InsertEvents(Events instance);
    partial void UpdateEvents(Events instance);
    partial void DeleteEvents(Events instance);
    #endregion
		
		public PartyCafeClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["u0103018_partycafeConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartyCafeClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Games> Games
		{
			get
			{
				return this.GetTable<Games>();
			}
		}
		
		public System.Data.Linq.Table<MenuGroups> MenuGroups
		{
			get
			{
				return this.GetTable<MenuGroups>();
			}
		}
		
		public System.Data.Linq.Table<MenuItems> MenuItems
		{
			get
			{
				return this.GetTable<MenuItems>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Gallery> Gallery
		{
			get
			{
				return this.GetTable<Gallery>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServicePhoto> ServicePhotos
		{
			get
			{
				return this.GetTable<ServicePhoto>();
			}
		}
		
		public System.Data.Linq.Table<EventPhoto> EventPhotos
		{
			get
			{
				return this.GetTable<EventPhoto>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<GalleryHashtag> GalleryHashtags
		{
			get
			{
				return this.GetTable<GalleryHashtag>();
			}
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<ServiceVideos> ServiceVideos
		{
			get
			{
				return this.GetTable<ServiceVideos>();
			}
		}
		
		public System.Data.Linq.Table<Events> Events
		{
			get
			{
				return this.GetTable<Events>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Games : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private string _Platform;
		
		private string _Description;
		
		private int _IdPhoto;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlatformChanging(string value);
    partial void OnPlatformChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Games()
		{
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Platform
		{
			get
			{
				return this._Platform;
			}
			set
			{
				if ((this._Platform != value))
				{
					this.OnPlatformChanging(value);
					this.SendPropertyChanging();
					this._Platform = value;
					this.SendPropertyChanged("Platform");
					this.OnPlatformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Games", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuGroups")]
	public partial class MenuGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _GroupName;
		
		private System.Nullable<int> _IdParent;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private int _IdPhoto;
		
		private EntitySet<MenuGroups> _MenuGroups2;
		
		private EntitySet<MenuItems> _MenuItems;
		
		private EntityRef<MenuGroups> _MenuGroups1;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnIdParentChanging(System.Nullable<int> value);
    partial void OnIdParentChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    #endregion
		
		public MenuGroups()
		{
			this._MenuGroups2 = new EntitySet<MenuGroups>(new Action<MenuGroups>(this.attach_MenuGroups2), new Action<MenuGroups>(this.detach_MenuGroups2));
			this._MenuItems = new EntitySet<MenuItems>(new Action<MenuItems>(this.attach_MenuItems), new Action<MenuItems>(this.detach_MenuItems));
			this._MenuGroups1 = default(EntityRef<MenuGroups>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdParent", DbType="Int")]
		public System.Nullable<int> IdParent
		{
			get
			{
				return this._IdParent;
			}
			set
			{
				if ((this._IdParent != value))
				{
					if (this._MenuGroups1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdParentChanging(value);
					this.SendPropertyChanging();
					this._IdParent = value;
					this.SendPropertyChanged("IdParent");
					this.OnIdParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroups_MenuGroups", Storage="_MenuGroups2", ThisKey="IdRecord", OtherKey="IdParent")]
		public EntitySet<MenuGroups> MenuGroups2
		{
			get
			{
				return this._MenuGroups2;
			}
			set
			{
				this._MenuGroups2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroups_MenuItems", Storage="_MenuItems", ThisKey="IdRecord", OtherKey="IdGroup")]
		public EntitySet<MenuItems> MenuItems
		{
			get
			{
				return this._MenuItems;
			}
			set
			{
				this._MenuItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroups_MenuGroups", Storage="_MenuGroups1", ThisKey="IdParent", OtherKey="IdRecord", IsForeignKey=true)]
		public MenuGroups MenuGroups1
		{
			get
			{
				return this._MenuGroups1.Entity;
			}
			set
			{
				MenuGroups previousValue = this._MenuGroups1.Entity;
				if (((previousValue != value) 
							|| (this._MenuGroups1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuGroups1.Entity = null;
						previousValue.MenuGroups2.Remove(this);
					}
					this._MenuGroups1.Entity = value;
					if ((value != null))
					{
						value.MenuGroups2.Add(this);
						this._IdParent = value.IdRecord;
					}
					else
					{
						this._IdParent = default(Nullable<int>);
					}
					this.SendPropertyChanged("MenuGroups1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_MenuGroups", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.MenuGroups.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.MenuGroups.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuGroups2(MenuGroups entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroups1 = this;
		}
		
		private void detach_MenuGroups2(MenuGroups entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroups1 = null;
		}
		
		private void attach_MenuItems(MenuItems entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroups = this;
		}
		
		private void detach_MenuItems(MenuItems entity)
		{
			this.SendPropertyChanging();
			entity.MenuGroups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuItems")]
	public partial class MenuItems : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private int _IdPhoto;
		
		private string _description;
		
		private string _Weight;
		
		private decimal _Price;
		
		private string _Country;
		
		private string _Platform;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private int _IdGroup;
		
		private EntityRef<MenuGroups> _MenuGroups;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPlatformChanging(string value);
    partial void OnPlatformChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OnIdGroupChanging(int value);
    partial void OnIdGroupChanged();
    #endregion
		
		public MenuItems()
		{
			this._MenuGroups = default(EntityRef<MenuGroups>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="VarChar(255)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(255)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform", DbType="VarChar(255)")]
		public string Platform
		{
			get
			{
				return this._Platform;
			}
			set
			{
				if ((this._Platform != value))
				{
					this.OnPlatformChanging(value);
					this.SendPropertyChanging();
					this._Platform = value;
					this.SendPropertyChanged("Platform");
					this.OnPlatformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="VarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="VarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGroup", DbType="Int NOT NULL")]
		public int IdGroup
		{
			get
			{
				return this._IdGroup;
			}
			set
			{
				if ((this._IdGroup != value))
				{
					if (this._MenuGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdGroupChanging(value);
					this.SendPropertyChanging();
					this._IdGroup = value;
					this.SendPropertyChanged("IdGroup");
					this.OnIdGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MenuGroups_MenuItems", Storage="_MenuGroups", ThisKey="IdGroup", OtherKey="IdRecord", IsForeignKey=true)]
		public MenuGroups MenuGroups
		{
			get
			{
				return this._MenuGroups.Entity;
			}
			set
			{
				MenuGroups previousValue = this._MenuGroups.Entity;
				if (((previousValue != value) 
							|| (this._MenuGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MenuGroups.Entity = null;
						previousValue.MenuItems.Remove(this);
					}
					this._MenuGroups.Entity = value;
					if ((value != null))
					{
						value.MenuItems.Add(this);
						this._IdGroup = value.IdRecord;
					}
					else
					{
						this._IdGroup = default(int);
					}
					this.SendPropertyChanged("MenuGroups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_MenuItems", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.MenuItems.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.MenuItems.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Login;
		
		private string _Password;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private System.Guid _IdentityId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OnIdentityIdChanging(System.Guid value);
    partial void OnIdentityIdChanged();
    #endregion
		
		public Users()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="NVarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="NVarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdentityId
		{
			get
			{
				return this._IdentityId;
			}
			set
			{
				if ((this._IdentityId != value))
				{
					this.OnIdentityIdChanging(value);
					this.SendPropertyChanging();
					this._IdentityId = value;
					this.SendPropertyChanged("IdentityId");
					this.OnIdentityIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gallery")]
	public partial class Gallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private int _IdPhoto;
		
		private string _Description;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private string _Tag;
		
		private EntitySet<GalleryHashtag> _GalleryHashtags;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Gallery()
		{
			this._GalleryHashtags = new EntitySet<GalleryHashtag>(new Action<GalleryHashtag>(this.attach_GalleryHashtags), new Action<GalleryHashtag>(this.detach_GalleryHashtags));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="NVarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="NVarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="VarChar(256)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gallery_GalleryHashtag", Storage="_GalleryHashtags", ThisKey="IdRecord", OtherKey="GalleryId")]
		public EntitySet<GalleryHashtag> GalleryHashtags
		{
			get
			{
				return this._GalleryHashtags;
			}
			set
			{
				this._GalleryHashtags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Gallery", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Galleries.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Galleries.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GalleryHashtags(GalleryHashtag entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = this;
		}
		
		private void detach_GalleryHashtags(GalleryHashtag entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private string _Title;
		
		private int _IdPhoto;
		
		private string _Text;
		
		private int _serviceType;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntitySet<ServicePhoto> _ServicePhotos;
		
		private EntitySet<ServiceVideos> _ServiceVideos;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnserviceTypeChanging(int value);
    partial void OnserviceTypeChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Service()
		{
			this._ServicePhotos = new EntitySet<ServicePhoto>(new Action<ServicePhoto>(this.attach_ServicePhotos), new Action<ServicePhoto>(this.detach_ServicePhotos));
			this._ServiceVideos = new EntitySet<ServiceVideos>(new Action<ServiceVideos>(this.attach_ServiceVideos), new Action<ServiceVideos>(this.detach_ServiceVideos));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceType", DbType="Int NOT NULL")]
		public int serviceType
		{
			get
			{
				return this._serviceType;
			}
			set
			{
				if ((this._serviceType != value))
				{
					this.OnserviceTypeChanging(value);
					this.SendPropertyChanging();
					this._serviceType = value;
					this.SendPropertyChanged("serviceType");
					this.OnserviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="NVarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="NVarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServicePhoto", Storage="_ServicePhotos", ThisKey="IdRecord", OtherKey="IdService")]
		public EntitySet<ServicePhoto> ServicePhotos
		{
			get
			{
				return this._ServicePhotos;
			}
			set
			{
				this._ServicePhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceVideos", Storage="_ServiceVideos", ThisKey="IdRecord", OtherKey="IdService")]
		public EntitySet<ServiceVideos> ServiceVideos
		{
			get
			{
				return this._ServiceVideos;
			}
			set
			{
				this._ServiceVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Service", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServicePhotos(ServicePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServicePhotos(ServicePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceVideos(ServiceVideos entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceVideos(ServiceVideos entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServicePhotos")]
	public partial class ServicePhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private int _IdService;
		
		private int _IdPhoto;
		
		private string _name;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnIdServiceChanging(int value);
    partial void OnIdServiceChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ServicePhoto()
		{
			this._Service = default(EntityRef<Service>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdService", DbType="Int NOT NULL")]
		public int IdService
		{
			get
			{
				return this._IdService;
			}
			set
			{
				if ((this._IdService != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdServiceChanging(value);
					this.SendPropertyChanging();
					this._IdService = value;
					this.SendPropertyChanged("IdService");
					this.OnIdServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServicePhoto", Storage="_Service", ThisKey="IdService", OtherKey="IdRecord", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServicePhotos.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServicePhotos.Add(this);
						this._IdService = value.IdRecord;
					}
					else
					{
						this._IdService = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_ServicePhoto", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.ServicePhotos.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.ServicePhotos.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventPhotos")]
	public partial class EventPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private int _IdEvent;
		
		private int _IdPhoto;
		
		private string _name;
		
		private EntityRef<Photo> _Photo;
		
		private EntityRef<Events> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnIdEventChanging(int value);
    partial void OnIdEventChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public EventPhoto()
		{
			this._Photo = default(EntityRef<Photo>);
			this._Events = default(EntityRef<Events>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEvent", DbType="Int NOT NULL")]
		public int IdEvent
		{
			get
			{
				return this._IdEvent;
			}
			set
			{
				if ((this._IdEvent != value))
				{
					if (this._Events.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEventChanging(value);
					this.SendPropertyChanging();
					this._IdEvent = value;
					this.SendPropertyChanged("IdEvent");
					this.OnIdEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_EventPhoto", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.EventPhotos.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.EventPhotos.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_EventPhoto", Storage="_Events", ThisKey="IdEvent", OtherKey="IdRecord", IsForeignKey=true)]
		public Events Events
		{
			get
			{
				return this._Events.Entity;
			}
			set
			{
				Events previousValue = this._Events.Entity;
				if (((previousValue != value) 
							|| (this._Events.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Events.Entity = null;
						previousValue.EventPhoto.Remove(this);
					}
					this._Events.Entity = value;
					if ((value != null))
					{
						value.EventPhoto.Add(this);
						this._IdEvent = value.IdRecord;
					}
					else
					{
						this._IdEvent = default(int);
					}
					this.SendPropertyChanged("Events");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photos")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _FileName;
		
		private string _Path;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private EntitySet<Games> _Games;
		
		private EntitySet<MenuGroups> _MenuGroups;
		
		private EntitySet<MenuItems> _MenuItems;
		
		private EntitySet<Gallery> _Galleries;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<ServicePhoto> _ServicePhotos;
		
		private EntitySet<EventPhoto> _EventPhotos;
		
		private EntitySet<Events> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    #endregion
		
		public Photo()
		{
			this._Games = new EntitySet<Games>(new Action<Games>(this.attach_Games), new Action<Games>(this.detach_Games));
			this._MenuGroups = new EntitySet<MenuGroups>(new Action<MenuGroups>(this.attach_MenuGroups), new Action<MenuGroups>(this.detach_MenuGroups));
			this._MenuItems = new EntitySet<MenuItems>(new Action<MenuItems>(this.attach_MenuItems), new Action<MenuItems>(this.detach_MenuItems));
			this._Galleries = new EntitySet<Gallery>(new Action<Gallery>(this.attach_Galleries), new Action<Gallery>(this.detach_Galleries));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._ServicePhotos = new EntitySet<ServicePhoto>(new Action<ServicePhoto>(this.attach_ServicePhotos), new Action<ServicePhoto>(this.detach_ServicePhotos));
			this._EventPhotos = new EntitySet<EventPhoto>(new Action<EventPhoto>(this.attach_EventPhotos), new Action<EventPhoto>(this.detach_EventPhotos));
			this._Events = new EntitySet<Events>(new Action<Events>(this.attach_Events), new Action<Events>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="NVarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="NVarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Games", Storage="_Games", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Games> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_MenuGroups", Storage="_MenuGroups", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<MenuGroups> MenuGroups
		{
			get
			{
				return this._MenuGroups;
			}
			set
			{
				this._MenuGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_MenuItems", Storage="_MenuItems", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<MenuItems> MenuItems
		{
			get
			{
				return this._MenuItems;
			}
			set
			{
				this._MenuItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Gallery", Storage="_Galleries", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Gallery> Galleries
		{
			get
			{
				return this._Galleries;
			}
			set
			{
				this._Galleries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Service", Storage="_Services", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_ServicePhoto", Storage="_ServicePhotos", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<ServicePhoto> ServicePhotos
		{
			get
			{
				return this._ServicePhotos;
			}
			set
			{
				this._ServicePhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_EventPhoto", Storage="_EventPhotos", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<EventPhoto> EventPhotos
		{
			get
			{
				return this._EventPhotos;
			}
			set
			{
				this._EventPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Events", Storage="_Events", ThisKey="IdRecord", OtherKey="IdPhoto")]
		public EntitySet<Events> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Games entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Games(Games entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_MenuGroups(MenuGroups entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_MenuGroups(MenuGroups entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_MenuItems(MenuItems entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_MenuItems(MenuItems entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_ServicePhotos(ServicePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_ServicePhotos(ServicePhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_EventPhotos(EventPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_EventPhotos(EventPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Events(Events entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GalleryHashtags")]
	public partial class GalleryHashtag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private int _GalleryId;
		
		private string _Hashtag;
		
		private EntityRef<Gallery> _Gallery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnGalleryIdChanging(int value);
    partial void OnGalleryIdChanged();
    partial void OnHashtagChanging(string value);
    partial void OnHashtagChanged();
    #endregion
		
		public GalleryHashtag()
		{
			this._Gallery = default(EntityRef<Gallery>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GalleryId", DbType="Int NOT NULL")]
		public int GalleryId
		{
			get
			{
				return this._GalleryId;
			}
			set
			{
				if ((this._GalleryId != value))
				{
					if (this._Gallery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGalleryIdChanging(value);
					this.SendPropertyChanging();
					this._GalleryId = value;
					this.SendPropertyChanged("GalleryId");
					this.OnGalleryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashtag", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Hashtag
		{
			get
			{
				return this._Hashtag;
			}
			set
			{
				if ((this._Hashtag != value))
				{
					this.OnHashtagChanging(value);
					this.SendPropertyChanging();
					this._Hashtag = value;
					this.SendPropertyChanged("Hashtag");
					this.OnHashtagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gallery_GalleryHashtag", Storage="_Gallery", ThisKey="GalleryId", OtherKey="IdRecord", IsForeignKey=true)]
		public Gallery Gallery
		{
			get
			{
				return this._Gallery.Entity;
			}
			set
			{
				Gallery previousValue = this._Gallery.Entity;
				if (((previousValue != value) 
							|| (this._Gallery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gallery.Entity = null;
						previousValue.GalleryHashtags.Remove(this);
					}
					this._Gallery.Entity = value;
					if ((value != null))
					{
						value.GalleryHashtags.Add(this);
						this._GalleryId = value.IdRecord;
					}
					else
					{
						this._GalleryId = default(int);
					}
					this.SendPropertyChanged("Gallery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Emails")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Subject;
		
		private string _Message;
		
		private string _To;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateSend;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnToChanging(string value);
    partial void OnToChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateSendChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSendChanged();
    #endregion
		
		public Email()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSend", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSend
		{
			get
			{
				return this._DateSend;
			}
			set
			{
				if ((this._DateSend != value))
				{
					this.OnDateSendChanging(value);
					this.SendPropertyChanging();
					this._DateSend = value;
					this.SendPropertyChanged("DateSend");
					this.OnDateSendChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceVideos")]
	public partial class ServiceVideos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private int _IdService;
		
		private string _Url;
		
		private string _Name;
		
		private string _Description;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnIdServiceChanging(int value);
    partial void OnIdServiceChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ServiceVideos()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdService", DbType="Int NOT NULL")]
		public int IdService
		{
			get
			{
				return this._IdService;
			}
			set
			{
				if ((this._IdService != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdServiceChanging(value);
					this.SendPropertyChanging();
					this._IdService = value;
					this.SendPropertyChanged("IdService");
					this.OnIdServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1000)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceVideos", Storage="_Service", ThisKey="IdService", OtherKey="IdRecord", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceVideos.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceVideos.Add(this);
						this._IdService = value.IdRecord;
					}
					else
					{
						this._IdService = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdRecord;
		
		private string _Name;
		
		private System.DateTime _EventDate;
		
		private int _IdPhoto;
		
		private string _UserCreate;
		
		private string _UserUpdate;
		
		private System.DateTime _DateCreate;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private string _description;
		
		private bool _isOpen;
		
		private EntitySet<EventPhoto> _EventPhoto;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdRecordChanging(int value);
    partial void OnIdRecordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnIdPhotoChanging(int value);
    partial void OnIdPhotoChanged();
    partial void OnUserCreateChanging(string value);
    partial void OnUserCreateChanged();
    partial void OnUserUpdateChanging(string value);
    partial void OnUserUpdateChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisOpenChanging(bool value);
    partial void OnisOpenChanged();
    #endregion
		
		public Events()
		{
			this._EventPhoto = new EntitySet<EventPhoto>(new Action<EventPhoto>(this.attach_EventPhoto), new Action<EventPhoto>(this.detach_EventPhoto));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRecord", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdRecord
		{
			get
			{
				return this._IdRecord;
			}
			set
			{
				if ((this._IdRecord != value))
				{
					this.OnIdRecordChanging(value);
					this.SendPropertyChanging();
					this._IdRecord = value;
					this.SendPropertyChanged("IdRecord");
					this.OnIdRecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPhoto", DbType="Int NOT NULL")]
		public int IdPhoto
		{
			get
			{
				return this._IdPhoto;
			}
			set
			{
				if ((this._IdPhoto != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPhotoChanging(value);
					this.SendPropertyChanging();
					this._IdPhoto = value;
					this.SendPropertyChanged("IdPhoto");
					this.OnIdPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="NVarChar(50)")]
		public string UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUpdate", DbType="NVarChar(50)")]
		public string UserUpdate
		{
			get
			{
				return this._UserUpdate;
			}
			set
			{
				if ((this._UserUpdate != value))
				{
					this.OnUserUpdateChanging(value);
					this.SendPropertyChanging();
					this._UserUpdate = value;
					this.SendPropertyChanged("UserUpdate");
					this.OnUserUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOpen", DbType="Bit NOT NULL")]
		public bool isOpen
		{
			get
			{
				return this._isOpen;
			}
			set
			{
				if ((this._isOpen != value))
				{
					this.OnisOpenChanging(value);
					this.SendPropertyChanging();
					this._isOpen = value;
					this.SendPropertyChanged("isOpen");
					this.OnisOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_EventPhoto", Storage="_EventPhoto", ThisKey="IdRecord", OtherKey="IdEvent")]
		public EntitySet<EventPhoto> EventPhoto
		{
			get
			{
				return this._EventPhoto;
			}
			set
			{
				this._EventPhoto.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Events", Storage="_Photo", ThisKey="IdPhoto", OtherKey="IdRecord", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._IdPhoto = value.IdRecord;
					}
					else
					{
						this._IdPhoto = default(int);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventPhoto(EventPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Events = this;
		}
		
		private void detach_EventPhoto(EventPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Events = null;
		}
	}
}
#pragma warning restore 1591
